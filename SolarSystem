#pragma once
#include <fstream>
#include "2DMatrixTransformation.h"
class CelestialObject {
public:
	CelestialObject(void)
	{
		CelestialObject(0, 0, 0);
	}

	CelestialObject(double x, double y, double speed)
	{
		this->x = x;
		this->y = y;

		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < 3; ++j) {
				coordMatrix[i][j] = 0;
			}
		}
		coordMatrix[0][0] = x;
		coordMatrix[1][1] = y;
		coordMatrix[2][2] = 1;
		this->speed = speed;
	}
	double x;
	double y;
	LegalMatrix<double> coordMatrix;
	double speed;
};

class SolarSystem
{
	CelestialObject* sol;
	CelestialObject* earth;

	void transpose() {
		sol->coordMatrix *= Trans
	}
public:

	const double EARTH_SOL_RADIUS;
//	const double LUNA_EARTH_RADIUS = 5;

	SolarSystem(void): EARTH_SOL_RADIUS(20)
	{
		this->sol = new CelestialObject(0, 0, 0);
		this->earth = new CelestialObject(0.5, 0.5, 0.5);
	}
	
	SolarSystem(CelestialObject* sol, CelestialObject* earth): EARTH_SOL_RADIUS(20)
	{
		this->sol = sol;
		this->earth = earth;
	}

	virtual ~SolarSystem(void)
	{
	}

	static SolarSystem* parse(std::ifstream* File)
	{
		double x, y, speed;
		*File >> x >> y >> speed;
		CelestialObject* sol = new CelestialObject(x, y, speed);
		*File >> x >> y >> speed;
		CelestialObject* earth = new CelestialObject(x, y, speed);

		return new SolarSystem(sol, earth);
	};

	void recalculateCoordinates()
	{
		transpose();
		rotate();
	}

};

